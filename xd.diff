diff --git a/meson.build b/meson.build
index 8173602..51a518f 100644
--- a/meson.build
+++ b/meson.build
@@ -23,3 +23,7 @@ executable('sweep', sweepfile, dependencies : [sqlite_dep], c_args : ['-g'])
 #Draw
 drawfile = ['src/main//execs/Draw.cpp']
 executable('draw', drawfile, dependencies : [sqlite_dep, draw_dep], c_args : ['-g'])
+
+#Run
+runfile = ['src/main//execs/Run.cpp']
+executable('run', runfile, dependencies : [sqlite_dep], c_args : ['-g'])
diff --git a/src/main/Heuristic.h b/src/main/Heuristic.h
index 15084ba..8fd40ba 100644
--- a/src/main/Heuristic.h
+++ b/src/main/Heuristic.h
@@ -116,7 +116,7 @@ class Heuristic {
         }
 
         std::tuple<std::shared_ptr<City> *, std::shared_ptr<City> *> apu(){
-            int max = (size)*(size-1);
+            int max = (size)*(size);
             std::shared_ptr<City>* s = ins->get_s();
             std::shared_ptr<City>* solmin = s;
             double min_cost = ins->get_cost();
@@ -124,7 +124,7 @@ class Heuristic {
             int c = 0;
             while(init_temp > epsilon){
                 double q = std::numeric_limits<double>::max();
-                while (p <= q /*&& (c < max)*/){
+                while (p <= q && (c < max)){
                     q = p;
                     auto [r, sn, sminN] = calcLote(min_cost, solmin);
                     p = r;
diff --git a/src/main/Modify_svg.h b/src/main/Modify_svg.h
index 40140f0..d73c5ee 100644
--- a/src/main/Modify_svg.h
+++ b/src/main/Modify_svg.h
@@ -32,7 +32,7 @@ class Modify_svg {
 
         static void plot_path(std::list<std::tuple<double,double>> points_list,
             double w, double h, xmlNodePtr root){
-            size_t size = points_list.size();
+            int size = points_list.size();
             std::tuple<double,double> points[size];
             size_t index = 0;
             for (std::tuple<double, double> value : points_list) {
@@ -81,7 +81,7 @@ class Modify_svg {
 
 
     public:
-        static void draw_map(std::list<std::tuple<double, double>> points) {
+        static void draw_map(std::list<std::tuple<double, double>> points, const char* route) {
             const char* input_svg_file = "./data/plot/world5.svg";
             xmlDocPtr doc = xmlReadFile(input_svg_file, NULL, 0);
             if (doc == NULL) {
@@ -97,7 +97,7 @@ class Modify_svg {
             plot_path(points, w,h,root);
             plot_points(points, w,h,root);
 
-            const char* output_svg_file = "output_map.svg";
+            const char* output_svg_file = route;
             xmlSaveFormatFile(output_svg_file, doc, 1);
 
             xmlFreeDoc(doc);
diff --git a/src/main/execs/AgenteViajero.cpp b/src/main/execs/AgenteViajero.cpp
index c0bffc7..7f7bd94 100644
--- a/src/main/execs/AgenteViajero.cpp
+++ b/src/main/execs/AgenteViajero.cpp
@@ -66,17 +66,16 @@ int main(int argc, char *argv[]) {
 
     auto [first, min] = h->apu();
 
-    std::cout << std::endl;
     std::cout << "Eval : "  << instance->eval(min) << std::endl;
+    std::cout << "SEED : "  << instance->get_seed() << std::endl;
     std::cout << "Lot  : "  << h->get_lotes() << std::endl;
     std::cout << "Temp : "  << h->get_temp() << std::endl;
-    std::cout << "SEED : "  << instance->get_seed() << std::endl;
     std::cout << "Eps  : "  << h->get_eps() << std::endl;
-    std::cout << "Phi  : "  << h->get_phi() << std::endl;
     std::cout << "EpsT : "  << h->get_eps_temp() << std::endl;
-    for(int i = 0; i<40; i++){
+    std::cout << "Phi  : "  << h->get_phi() << std::endl;
+    for(int i = 0; i<size; i++){
         std::cout << min[i]-> get_id();
-        if(i != 39)
+        if(i != size-1)
             std::cout << ",";
     }
     return 0;
diff --git a/src/main/execs/Draw.cpp b/src/main/execs/Draw.cpp
index 4720eaf..92136cf 100644
--- a/src/main/execs/Draw.cpp
+++ b/src/main/execs/Draw.cpp
@@ -10,12 +10,15 @@ int main(int argc, char *argv[]) {
     const std::string databasePath = "./data/tsp.db";
     std::shared_ptr<Bdd> bdd = std::make_shared<Bdd>(databasePath);
     std::unique_ptr<Io> input = std::make_unique<Io>(argv[1]);
+
     int size = input->get_size();
     int * ins = input->get_array();
+
+    const char* route = argv[2];
+
     std::shared_ptr<Instance> instance = std::make_shared<Instance>(ins, bdd, size, 0);
-    std::shared_ptr<City>* min = instance->get_s();
     std::list<std::tuple<double,double>> L = instance->get_path(instance, size);
-    Modify_svg::draw_map(L);
+    Modify_svg::draw_map(L, route);
 
     return 0;
 }
diff --git a/src/main/execs/Eval.cpp b/src/main/execs/Eval.cpp
index 22b4aac..2e9e23c 100644
--- a/src/main/execs/Eval.cpp
+++ b/src/main/execs/Eval.cpp
@@ -19,9 +19,9 @@ int main(int argc, char *argv[]) {
     std::cout << "Max  : "  << instance->get_max_edge() << std::endl;
     std::cout << "Norm  : "  << instance->get_normalizer() << std::endl;
 
-    for(int i = 0; i<40; i++){
+    for(int i = 0; i<size; i++){
         std::cout << min[i]-> get_id();
-        if(i != 39)
+        if(i != size-1)
             std::cout << ",";
     }
     return 0;
diff --git a/src/main/execs/Run.cpp b/src/main/execs/Run.cpp
new file mode 100644
index 0000000..1ea2d70
--- /dev/null
+++ b/src/main/execs/Run.cpp
@@ -0,0 +1,69 @@
+#include <iostream>
+#include <cstdlib>
+#include <cstring>
+#include <string>
+#include <random>
+
+int main(int argc, char* argv[]) {
+    if (argc != 4) {
+        std::cerr << "Usage: " << argv[0] << " [-s|-f] <integer>" << std::endl;
+        return 1;
+    }
+
+    const char* flag = argv[1];
+    const char* integerStr = argv[2];
+    int number = std::atoi(integerStr);
+    const char* insS = argv[3];
+    int ins = std::atoi(insS);
+
+    std::mt19937 rng;
+    rng.seed(number);
+    std::uniform_int_distribution<int> distribution(1000, 1500);
+    std::uniform_int_distribution<int> distPhi(90, 95);
+
+    //./release/reproduce data/input/150.tsp -t 1 1000 8 0.0001 0,01 0.95
+
+    if (std::strcmp(flag, "-s") == 0) {
+        for (int i = 1; i < number + 1; i++) {
+            const char* comm = "./release/reproduce ";
+            const char* inp = "./data/input/";
+            char insN[50];
+            snprintf(insN, sizeof(insN), "%d", ins);
+            const char* extin = ".tsp -t ";
+            char seed[50];
+            snprintf(seed, sizeof(seed), "%d ", i);
+            char lote[50];
+            snprintf(lote, sizeof(lote), "%d", distribution(rng));
+            char temp[50];
+            snprintf(temp, sizeof(temp), "%d", distribution(rng));
+            const char* eps = "0.0001";
+            const char* epsP = "0.01";
+            char phi[50];
+            snprintf(phi, sizeof(phi), "%.2f", static_cast<double>(distPhi(rng)) / 100.0);
+
+            const char* dir = " > ./results/";
+            char file[50];
+            snprintf(file, sizeof(file), "%d", i);
+            const char* ext = ".txt";
+
+            char ins[500];
+            snprintf(ins, sizeof(ins), "%s%s%s%s%s%s %s %s %s %s%s%s%s",
+                     comm, inp, insN, extin,
+                     seed, lote, temp, eps, epsP, phi, dir, file, ext);
+
+            std::cout << ins << std::endl;
+
+            const char* command = ins;
+            int exitCode = system(command);
+        }
+
+    } else if (std::strcmp(flag, "-f") == 0) {
+        int intValue = std::atoi(integerStr);
+        std::cout << "Flag: -f, Integer: " << intValue << std::endl;
+    } else {
+        std::cerr << "Invalid flag. Use -s or -f." << std::endl;
+        return 1;
+    }
+
+    return 0;
+}
diff --git a/src/main/execs/Sweep.cpp b/src/main/execs/Sweep.cpp
index 0e825e4..f260f54 100644
--- a/src/main/execs/Sweep.cpp
+++ b/src/main/execs/Sweep.cpp
@@ -31,9 +31,9 @@ int main(int argc, char *argv[]) {
 
     if (improvement != 0){
         std::cout << "Pos sweep eval : "  << instance->eval(min) << std::endl;
-        for(int i = 0; i<40; i++){
+        for(int i = 0; i<size; i++){
             std::cout << min[i]-> get_id();
-            if(i != 39)
+            if(i != size-1)
                 std::cout << ",";
         }
     }else{
